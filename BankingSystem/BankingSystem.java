import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;



/**
 * Manage connection to database and perform SQL statements.
 */
public class BankingSystem {

	// Connection properties
	private static String driver;
	private static String url;
	private static String username;
	private static String password;
	private static boolean connected = false;

	// JDBC Objects
	private static Connection con;
	private static Statement stmt;
	private static ResultSet rs;

	/**
	 * Initialize database connection given properties file.
	 * @param filename name of properties file
	 */
	public static void init(String filename) {
		try {
			Properties props = new Properties();						// Create a new Properties object
			FileInputStream input = new FileInputStream(filename);	// Create a new FileInputStream object using our filename parameter
			props.load(input);										// Load the file contents into the Properties object
			driver = props.getProperty("jdbc.driver");				// Load the driver
			url = props.getProperty("jdbc.url");						// Load the url
			System.out.println("url: " + url);	//test
			username = props.getProperty("jdbc.username");			// Load the username
			System.out.println("username: " + username);	//test
			password = props.getProperty("jdbc.password");			// Load the password
			System.out.println("pwd: " + password);	//test
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Test database connection.
	 */
	public static void testConnection() {
		System.out.println(":: TEST - CONNECTING TO DATABASE");
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, username, password);
			con.close();
			System.out.println(":: TEST - SUCCESSFULLY CONNECTED TO DATABASE");
		} catch (Exception e) {
			System.out.println(":: TEST - FAILED CONNECTED TO DATABASE");
			e.printStackTrace();
		}
	}


	/*
	 * customer login and authentication
	 */
	public static boolean login(String id, String pin) {
		try {
			System.out.println(":: LOGGING IN... PLEASE WAIT");
			Class.forName(driver);
			con = DriverManager.getConnection(url, username, password);
			String query = "SELECT ID, PIN FROM P1.Customers WHERE ID = " + id + " AND pin = " + pin + ";";
			stmt = con.createStatement();
			rs = stmt.executeQuery(query);
			while(rs.next()) {
				if(id.equals("" + rs.getString(1)) && pin.equals("" + rs.getString(2))) {
					System.out.println(":: Login Authenticated");
					return true;
				}
			}
			con.commit();
			return false;
		}
		catch(Exception e) {
			System.out.println(":: FAILED TO LOGIN");
			e.printStackTrace();
		}
		return false;
	}

	/*
	 * validate customer action
	 */
	public static boolean validated(String acctNo) {
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, username, password);
			//stmt.getConnection();
			String query = "SELECT ID FROM P1.Account WHERE NUMBER = " + acctNo;
			rs = stmt.executeQuery(query);
			if(rs.getString(1).equals(BankingUI.custId)) {
				return true;
			}
		} catch(Exception e) {
			System.out.println("::  COULD NOT VALIDATE - PLEASE ENTER A VALID ACCOUNT NUMBER");
		}
		return false;
	}


	/*
	 * getting the connection ready
	 */
	public static void getConnected() {
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, username, password);
			stmt = con.createStatement();
			connected = true;
			System.out.println(":: TEST - SUCCESSFULLY CONNECTED TO DATABASE");
		} catch (Exception e) {
			System.out.println(":: TEST - FAILED CONNECTED TO DATABASE");
			e.printStackTrace();
		}
	}

	/*
	 * Close the current connection to the database
	 */
	public static void closeConnection() {
		try {
			Class.forName(driver);
			con.close();
			connected = false;
			System.out.println(":: TEST - SUCCESSFULLY CONNECTED TO DATABASE");
		} catch (Exception e) {
			System.out.println(":: TEST - FAILED CONNECTED TO DATABASE");
			e.printStackTrace();
		}
	}

	/*
	 * create tables
	public static void createTables() {
		try {
			stmt = con.createStatement();
			String query1 = "create table P1.Customer(ID INT NOT NULL Primary Key GENERATED BY DEFAULT AS IDENTITY (START WITH 100, INCREMENT BY 1, NO CACHE), Name varchar(15) not null, Gender char not null CHECK (Gender in ('M','F')), Age int not null CHECK (Age >= 0), Pin int not null CHECK (Pin >= 0));";
			System.out.println(query1);
			stmt.executeUpdate(query1);
			String query2 = "create table P1.Account(NUMBER INT NOT NULL Primary Key GENERATED ALWAYS AS IDENTITY (START WITH 10000, INCREMENT BY 1, NO CACHE),ID int not null, Balance int not null CHECK (Balance >= 0), Type char not null CHECK (Type in ('C', 'S')), Status char not null CHECK (Status in ('A','I')), constraint my_constraint foreign key(ID) REFERENCES P1.Customer(ID) ON DELETE CASCADE);";
			stmt.executeUpdate(query2);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Exception in creating a new customer");
			e.printStackTrace();
		}
	}
	 */


	/**
	 * Create a new customer.
	 * @param name customer name
	 * @param gender customer gender
	 * @param age customer age
	 * @param pin customer pin
	 */
	public static void newCustomer(String name, String gender, String age, String pin) 
	{
		try {
			System.out.println(":: CREATE NEW CUSTOMER - STARTING");
			Class.forName("com.ibm.db2.jcc.DB2Driver");                             
	    	con = DriverManager.getConnection (url, username, password);                 
	  		stmt = con.createStatement(); 
			String new_customer = String.format("Insert into P1.CUSTOMER(Name, Gender, Age, Pin) values ('%s', '%s', %s, %s)", name, gender, age, pin); 
			stmt.executeUpdate(new_customer);
			stmt.close();
			con.commit();
			con.close();
			System.out.println(":: CREATE NEW CUSTOMER - SUCCESS\n");
		
		}
		
		catch(Exception e){
			System.out.println(":: NEW CUSTOMER NOT CREATED - FAILED");
		}
	}

	
	/**
	 * Open a new account.
	 * @param id customer id
	 * @param type type of account
	 * @param amount initial deposit amount
	 */
	public static void openAccount(String id, String type, String amount) 
	{
		try {
			System.out.println(":: RUNNING - OPEN ACCOUNT");
			String id1 = id;
			String type1 = type;
			stmt = con.createStatement();
			String query = "insert into P1.Accounnt values ('" + id + "', '" + amount + "', '" + type + "', " + "'A'" + ");";
			System.out.println(query);
			String getacctno = String.format("SELECT Number FROM P1.Accounnt WHERE id = %s AND type = %s", id1, type1);
			System.out.println(query);
			stmt.executeUpdate(query);
			rs = stmt.executeQuery(getacctno);
			while(rs.next()) {
				System.out.println("Kindly Note Down your account number: " + rs.getNString(1));
			}
			con.commit();
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Exception in creating a new customer");
			e.printStackTrace();
		}
		System.out.println(":: OPEN ACCOUNT - SUCCESS");
	}

	/**
	 * Close an account.
	 * @param accNum account number
	 */
	public static void closeAccount(String accNum) 
	{
		try {
			System.out.println(":: RUNNING - CLOSE ACCOUNT: " + accNum);
			stmt = con.createStatement();
			String query = String.format("Update P1.Account set balance = 0, status = 'I' where Number = %s and status = 'A' and ID = %s", accNum, BankingUI.custId);
			System.out.println(query);
			stmt.executeUpdate(query);
			con.commit();
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Exception in Deleting the Account: " + accNum);
			e.printStackTrace();
		}
		System.out.println(":: CLOSE ACCOUNT - SUCCESS: " + accNum);
	}

	/**
	 * Deposit into an account.
	 * @param accNum account number
	 * @param amount deposit amount
	 * @throws SQLException 
	 */
	public static void deposit(String accNum, String amount)
	{
		try {
			System.out.println(":: RUNNING - DEPOSIT AMOUNT");
			stmt = con.createStatement();
			String balance = "SELECT Balance FROM P1.Account WHERE Number = " + accNum +";";
			rs = stmt.executeQuery(balance); //prinnt previous balance

			balance = rs.getString(1);
			System.out.println("Balance before Deposit: " + balance);

			String query = "UPDATE P1.Account SET Balance = Balance +" + amount + "WHERE Number = " + accNum + ";";
			System.out.println(query);
			stmt.executeUpdate(query);
			balance = rs.getString(1);
			System.out.println("Balance After Deposit: " + balance);
			con.commit();
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Exception in Deleting the Account: " + accNum);
			e.printStackTrace();
		}


		System.out.println(":: DEPOSIT AMOUNT - SUCCESS");
	}

	/**
	 * Withdraw from an account.
	 * @param accNum account number
	 * @param amount withdraw amount
	 */
	public static void withdraw(String accNum, String amount) 
	{
		try {
			stmt = con.createStatement();

			String check = "SELECT Balance FROM P1.Account WHERE Number = " + accNum + ";";
			rs = stmt.executeQuery(check);

			if(rs.getInt(1) >= Integer.parseInt(amount)) {
				String prevbalance = "SELECT Balance FROM P1.Account WHERE Number = " + accNum +";";
				rs = stmt.executeQuery(prevbalance); //prinnt previous balance

				String balance = rs.getString(1);
				System.out.println("Current Balance: "+balance);

				String query = "UPDATE P1.Account SET Balance = Balance -" + amount + "WHERE Number = " + accNum + ";";
				System.out.println(query);
				rs = stmt.executeQuery(query);
				balance = rs.getString(1);
				System.out.println("New Balance After Deposit: "+balance);
			}
			else {
				System.out.println("Not Enough Balance To Withdraw, Current Balance: "+ rs.getInt(1));
			}
			con.commit();
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Exception in Deleting the Account: " + accNum);
			e.printStackTrace();
		}

		System.out.println(":: WITHDRAW - SUCCESS");
	}

	/**
	 * Transfer amount from source account to destination account. 
	 * @param srcAccNum source account number
	 * @param destAccNum destination account number
	 * @param amount transfer amount
	 */
	public static void transfer(String srcAccNum, String destAccNum, String amount) 
	{
		try {
			stmt = con.createStatement();
			String check = "SELECT Balance FROM P1.Account WHERE Number = " + srcAccNum + ";";
			rs = stmt.executeQuery(check);
			if(rs.getInt(1) >= Integer.parseInt(amount)) {
				String srcQuery = "UPDATE P1.Account SET Balance = Balance -" + amount + "WHERE Number = " + srcAccNum + ";";
				stmt.executeQuery(srcQuery);

				String destQuery = "UPDATE P1.Account SET Balance = Balance +" + amount + "WHERE Number = " + srcAccNum + ";";
				stmt.executeQuery(destQuery);
			}
			else {
				System.out.println("Not Enough Balance To Transfer, Current Balance: "+ rs.getInt(1));
			}
			con.commit();
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.out.println("Exception in TRANSFER PROCESS:");
			e.printStackTrace();
		}
		System.out.println(":: TRANSFER - SUCCESS");
	}

	/**
	 * Display account summary.
	 * @param cusID customer ID
	 */
	public static void accountSummary(String cusID) 
	{
		try {
			System.out.println(":: ACCOUNT SUMMARY - STARTING");
			stmt = con.createStatement(); 
			String summary_account = "SELECT Number, Balance From P1.ACCOUNT WHERE P1.ACCOUNT.ID = " + cusID + ";"; 
			rs = stmt.executeQuery(summary_account);
			int total = 0;
			//System.out.println("Account summary");
			while (rs.next())
			{
				System.out.println("Acount number: " +rs.getString(1)+",/t Balance: "+rs.getString(2));
				total = total + rs.getInt(2);

			}
			System.out.println("Total balance: "+ total);
			stmt.close();
			con.commit();
			System.out.println(":: ACCOUNT SUMMARY - SUCCESS");
		}
		catch(Exception e)
		{
			System.out.println(":: ACCOUNT SUMMARY - FAILED");
		}
	}


	/**
	 * Display Report A - Customer Information with Total Balance in Decreasing Order.
	 */
	public static void reportA() 
	{
		try {
			System.out.println(":: REPORT A - RUNNING");       
			Statement stmt = con.createStatement();                                                 
			String query = "Select ID, Name, Gender, Age, PIN, TOTAL from p1.customer Join (select ID as accountID,sum(balance) as TOTAL from p1.account group by id) on accountID = p1.customer.id order by Total Desc";
			System.out.println("    ID         Name   Gender Age       Pin     Total");
			System.out.println("----------- ---------- ---- ----       ----    -----");	
			ResultSet rs = stmt.executeQuery(query);                                                
			while(rs.next()) {
				System.out.printf("%10.10s  %10.10s   %s   %s %10.10s %10.10s\n", rs.getInt(1), rs.getInt(2), rs.getInt(3), rs.getInt(4), rs.getInt(5) , rs.getInt(5)); 
			}
			rs.close();                                                                             
			stmt.close();                                                                           
			System.out.println(":: REPORT A - SUCCESS\n");
		} catch (Exception e) {
			System.out.println(":: ERROR - REPORT COULDNOT BE GENERATED AT THIS TIME");
		}
	}

	/**
	 * Display Report B - Customer Information with Total Balance in Decreasing Order.
	 * @param min minimum age
	 * @param max maximum age
	 */
	public static void reportB(String min, String max) 
	{
		System.out.println(":: REPORT B - SUCCESS");
	}
}

